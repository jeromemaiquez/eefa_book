/* Chapter F1.1: Exploring Images */
/* Section 1: Accessing an Image */

  // load an image into GEE (from Landsat 5)
  // taken on June 6, 2000
  // no output yet at this point
var first_image = ee.Image(
    'LANDSAT/LT05/C02/T1_L2/LT05_118038_20000606');

  // several ways to explore image in GEE
  
  // no. 1: retrieve metadata via print(image)
  // output: list of 19 bands in image
  // ^^ 4 properties per band, incl. id/name
print(first_image);

  // Landsat 5 MSS measures reflectance
  // in 6 diff portions of EM spectrum (SR_B1 to SR_B7)
  // 1st 3 bands measure blue, green, & red (visible)
  // other 3 measure infrared parts (NIR, SWIR1 and 2)
  
  // an img band is an example of a raster data model
  // where data is stored in 2D grid of pixels
  // value in each pixel is called digital no. (DN)
  // what DN represents depends on the sensor
  
  // some info abt bands viewable in metadata
  // e.g. name, data type, crs, dimensions
  // other info found in catalog or other methods
  
/* Section 2: Visualizing an Image */

  // add 1 band (blue) to the map as a layer to visualize
Map.addLayer(
  first_image,  // dataset to display
  { // visualization parameters: bands, range, etc.
    bands: ['SR_B1'], // specific band(s) to display
    min: 8000,        // min value
    max: 17000        // max value (display range)
    // by default, min = black, max = white
    // values in between = grayscale
  },
  'Layer 1',     // name to show in Layer Manager
  0
);

  // expected output: dark, angled square in shanghai
  // coastline & built-up area are distinguishable
  
  // image can be explored with inspector tool
  // inspector panel will report data on clicked loc
  // under the 3 following categories:
  
  // 1) point: data on loc (coords, zoom lvl, scale)
  // 2) pixel: data on px (layer name, source, value per band)
  // ^^ can be bar chart or dictionary
  // 3) object: data on source (metadata (like print))
  
  // add 2 more bands to the map (green & red)
Map.addLayer(
  first_image,
  {
    bands: ['SR_B2'],
    min: 8000,
    max: 17000
  },
  'Layer 2',
  0,  // not shown
  1   // opaque
);

Map.addLayer(
  first_image,
  {
    bands: ['SR_B3'],
    min: 8000,
    max: 17000
  },
  'Layer 3',
  0,  // not shown
  0   // transparent
);
  
  // expected output: no change, new bands invisible
  // can be made visible via layers manager in map
  // when visible, layers are displayed on a stack
  
  // on top of layers list = on top of map display
  // last to be visualized = on top of map display
  
/* Section 3: True-Color Composites */

  // single-band images appear as grayscale
  // to compare visual differences in pixel values
  // for all band layers all at once,
  // we can display them as an RGB composite
  // uses 3 primary colors (RGB) to display all band values
Map.addLayer(
  first_image,
  {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'],
    min: 8000,
    max: 17000
  },
  'Natural Color',
  0
);
  // expected output: a true-color composite
  // red band (B3) showed w/ shades of red
  // green (B2) w/ green, and blue (B1) w/ blue
  // specified this pairing via order of bands in list
  
/* Section 4: False-Color Composites */

  // Landsat image contains more bands than RGB
  // these invisible bands can also be shown via RGB composite
  // these are known as false-color composites
  
  // example: near-infrared (B4) is invisible to naked eye
  // but included since '70s to distinguish envi conditions
  // NIR can detect forest types & crop health
Map.addLayer(
  first_image,
  {
    bands: ['SR_B4', 'SR_B3', 'SR_B2'],
    min: 8000,
    max: 17000
  },
  'False Color',
  0
);

  // expected output: color-infrared composite
  // where vegetation = red, water = blue
  // display colors not paired naturally w/ bands
  // scene not observable IRL, but visually interpretable
  // which bands are passed thru r/g/b channels?
  
  // land in norther peninsula = very red
  // cos NIR value in that area is high vs. other bands
  // ^^ can be checked in inspector tool
  
  // lakes SW of shanghai = very dark
  // cos values in all 3 bands are low
  
  // sediment off yangtze = blue/cyan
  // if blue, 3rd band (B2) >> other bands
  // aka if blue, much greener (?) irl
  // if cyan, last 2 bands (B3 + B2) >> B4
  // aka if cyan, yellower/more orange irl
  
  // overall, false-color has more contrast than true-color
  // to help understand differences across scene
  // 2 remaining SWIR bands (B5+B6) also useful
  // example, SWIR1-NIR-G composite
Map.addLayer(
  first_image,
  {
    bands: ['SR_B5', 'SR_B4', 'SR_B2'],
    min: 8000,
    max: 17000
  },
  'Short-wave False Color',
  0
);

  // expected output: land = bright green, water = dark
  
  // green in SWIR = red in NIR... why??
  // cos NIR is in G channel in SWIRcomp & R channel in NIRcomp
  
  // grey in NIR = dark/brown in SWIR (croplands ata...)
  // if dark, NIR (B4, in G) > SWIR1 (B5, in R)
  // if brown, SWIR1 > NIR instead
  
/* Section 5: Additive Color System */

  // so far, we used RGB composites to make
  // true-color and false-color images
  // to understand composites: additive color system
  
  // images use 3 display channels: red, green, blue
  // order of bands in composite determine channel
  // used to display pixel DNs for each band
  
  // when pixel DN is higher in 1 band vs others
  // that pixel will be tinted in color channel for that band
  // e.g. if 1st band > other bands --> appears red
  // intensity of color = magnitude of diff. between DNs
  
  // in additive color system...
  // R+G = yellow, G+B = cyan, B+R = magenta
  // R+G+B = white, no RGB = black
  
  // for RGB composite: if values in 2 bands > other band
  // pixel will appear tinted as combined color (C/M/Y)
  // e.g. R+G channels > B channel --> appears yellow
  
/* Section 6: Non-Spectral Attributes */

  // additive color system in GEE can also be used
  // to display bands w/ non-optical, abstract attributes
  
  // example: add nightlights image to map
  // 1 band only (stable_lights)
var lights93 = ee.Image(
    'NOAA/DMSP-OLS/NIGHTTIME_LIGHTS/F101993');
print('Nighttime Lights', lights93);

Map.addLayer(
  lights93,
  {
    bands: ['stable_lights'],
    min: 0,
    max: 63
  },
  'Lights',
  0
);

  // output: avg nightlight brightness per pixel in 1993
  // image is abstract: no clouds, no ephemeral lights, etc.
  // only shown is AVERAGE brightness of stable lights
  
/* Section 7: Abstract RGB Composites */

  // we can use additive color system of GEE
  // to compare stable lights at 3 diff. yrs
  
  // add lights layers for 2003 and 2013
var lights03 = ee.Image(
    'NOAA/DMSP-OLS/NIGHTTIME_LIGHTS/F152003')
    .select('stable_lights').rename('2003');
    
var lights13 = ee.Image(
    'NOAA/DMSP-OLS/NIGHTTIME_LIGHTS/F182013')
    .select('stable_lights').rename('2013');

  // combine lights layers for '93, '03, and '13
  // into 1 change layer (rename '93 narin in d process)
  // using the ee.Image.addBands method
var changeImage = lights13.addBands(lights03)
    .addBands(lights93.select('stable_lights').rename('1993'));

  // print metadata    
print('Change Image', changeImage);

  // add changeImage to map
Map.addLayer(
  changeImage,
  {
    min: 0,
    max: 63 // default: 63
  },
  'Change Composite',
  0
);
  
  // output: night lights w/ different tints
  // white: high for all yrs; yellow: '03 onwards
  // red: only '13; green: only '03; blue: only '93
  
  // yellow & red edges around urban cores
  // are present in more recently-urbanized areas
  // e.g. china (shanghai, beijing), sokor (seoul)
  // vs. all-white lights = earlier urbanization
  // e.g. japan (tokyo, nagoya, osaka)
  
  // blue/cyan/magenta lights in korea strait
  // represent resource extraction activities (fishing)
  // that use bright lights (to attract squid to surf.)
  // na stable over 1 yr, but not over a decade
  // e.g. blue = fished in '93; green = fished in '03
  
  // red lights in north america = gas flaring
  // means oil extraction only boomed by 2013
  // vs. assorted lights in persian gulf & russia
  // = stable & shifting locations of oil drills
  // blue in syria-iraq border = oil abandoned after '93
  
/* Section 8: SYNTHESIS */

  // 1) compare lights in damascus vs. amman
  // what caused the difference in colors?
  
    // damascus = yellow-green; amman = red-white
    // damascus boomed in '03 then declined
    // amman steadily growing over 3 decades
    
  // 2) observe lights in port harcourt, nigeria
  // what do color changes mean? (vs. satellite basemap)
  
    // blue/green = decline of oil after '93 or '03
    // satellite map shows green surrounding the city
    // aka absence of oil extraction in '23
    // redder spots = oil present in '13 = grey in basemap
    
  // 3) we didn't specify band order in RGB composite
  // how did it choose display channels?
    
    // band order (index): 1 = red, 2 = green, 3 = blue
    
  // 4) create 3 composites for selected image
  // true-color, infrared, SWIR false colors
  
  // step 1: load image & print metadata
/*
var image = ee.Image(
    'LANDSAT/LT05/C02/T1_L2/LT05_022039_20050907');
print(image);

  // step 2: visualize true-color composite
Map.addLayer(
  image,
  {
    bands: ['SR_B3', 'SR_B2', 'SR_B1'],
    min: 8000,
    max: 17000
  },
  'True Color');
  
  // step 3: visualize infrared false-color
Map.addLayer(
  image,
  {
    bands: ['SR_B4', 'SR_B3', 'SR_B2'],
    min: 8000,
    max: 17000
  },
  'NIR False Color');
  
  // step 4: visualize SWIR false-color
Map.addLayer(
  image,
  {
    bands: ['SR_B5', 'SR_B4', 'SR_B2'],
    min: 8000,
    max: 17000
  },
  'SWIR False Color');
*/  
  
  // environmental event: flooding after Katrina
  // false-color: areas covered in water (e.g. floods)
  
  // 5) run code below to view image over shanghai
  // then inspect layers w/ inspector panel
var image = ee.Image('LANDSAT/LT05/C02/T1_L2/LT05_118038_20000606')

Map.addLayer(
  image,
  {
    bands: ['SR_B1'],
    min: 8000,
    max: 17000
  },
  'Layer 1',
  0);
  
Map.addLayer(
  image.select('SR_B1'),
  {
    min: 8000,
    max: 17000
  },
  'Layer 2',
  0);
  
  // how do the 2 layers differ and why?
  // layer 1 (bands specified) shows values for all bands
  // layer 2 (bands selected) shows value only for SR_B1
  
  // bands in {} is only a visualization parameter
  // so image stays as a multi-band image
  // meanwhile, select(band) extracts only 1 band
  // so image is now only single-band